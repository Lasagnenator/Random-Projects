if x<0 and float(x).is_integer():
        raise ValueError('Math error. Result Undefined')
    elif float(x).is_integer():
        return factorial(x+1)
    lanczos_g = 6.024680040776729583740234375
    lanczos_g_minus_half = 5.524680040776729583740234375
    LANCZOS_N = 13
    lanczos_num_coeffs = [23531376880.410759688572007674451636754734846804940,
                 42919803642.649098768957899047001988850926355848959,
                 35711959237.355668049440185451547166705960488635843,
                 17921034426.037209699919755754458931112671403265390,
                 6039542586.3520280050642916443072979210699388420708,
                 1439720407.3117216736632230727949123939715485786772,
                 248874557.86205415651146038641322942321632125127801,
                 31426415.585400194380614231628318205362874684987640,
                 2876370.6289353724412254090516208496135991145378768,
                 186056.26539522349504029498971604569928220784236328,
                 8071.6720023658162106380029022722506138218516325024,
                 210.82427775157934587250973392071336271166969580291,
                 2.5066282746310002701649081771338373386264310793408]
    lanczos_den_coeffs = [0.0, 39916800.0, 120543840.0, 150917976.0, 105258076.0, 45995730.0,
                          13339535.0, 2637558.0, 357423.0, 32670.0, 1925.0, 66.0, 1.0]
    NGAMMA_INTEGRAL = 23
    gamma_integral = [1.0, 1.0, 2.0, 6.0, 24.0, 120.0, 720.0, 5040.0, 40320.0, 362880.0,
                      3628800.0, 39916800.0, 479001600.0, 6227020800.0, 87178291200.0,
                      1307674368000.0, 20922789888000.0, 355687428096000.0,
                      6402373705728000.0, 121645100408832000.0, 2432902008176640000.0,
                      51090942171709440000.0, 1124000727777607680000.0]
    def lanczos_sum(x):
        num = 0.0
        den = 0.0
        if x < 0.0:
            raise ValueError('Lanczos sum asked for a negative value')
        if x < 5.0:
            i = LANCZOS_N-1
            while i != 0:
                num = num*x+lanczos_num_coeffs[i]
                den = den/x+lanczos_den_coeffs[i]
                i -= 1
        else:
            for i in range(0, LANCZOS_N):
                num = num/x+lanczos_num_coeffs[i]
                den = den/x+lanczos_num_coeffs[i]
        return num/den

    def m_tgamma(x):
        absx, r, y, z, sqrtpow = 0.0, 0.0, 0.0, 0.0, 0.0
        if x == 'NaN':
            return 'NaN'
        elif x == 'Infinity':
            return 'NaN'
        elif x == '-Infinity':
            return 'NaN'
        if x == 0.0:
            return 'Infinity'
        if x == int(x):
            if x < 0.0:
                return 'NaN'
            if x <= NGAMMA_INTEGRAL:
                return gamma_integral[int(x)-1]
        absx = abs(x)
        if absx < 1e-20:
            r = 1/x
            return r
        if absx > 200.0:
            if x < 0.0:
                return 0.0
            else:
                return 1e308
        y = absx + lanczos_g_minus_half
        if absx > lanczos_g_minus_half:
            q = y-absx
            z = q-lanczos_g_minus_half
        else:
            q = y-lanczos_g_minus_half
            z = q-absx
        z = z*lanczos_g/y
        if x<0.0:
            r = -pi/sin(absx)/absx*exp(y)/lanczos_sum(absx)
            r -= z*r
            if absx < 140.0:
                r /= y**(absx-0.5)
            else:
                sqrtpow = y**(absx/(2.0-0.25))
                r /= sqrtpow
                r /= sqrtpow
        else:
            r = lanczos_sum(absx)/exp(y)
            r += z*r
            if absx < 140:
                r *= y**(absx - 0.5)
            else:
                sqrtpow = y**(absx/2.0-0.25)
                r *= sqrtpow
                r *= sqrtpow
        return r
    return m_tgamma(x)