#gamma function
from math import *
def gamma(x):
    _a =( 1.00000000000000000000, 0.57721566490153286061, -0.65587807152025388108,
         -0.04200263503409523553, 0.16653861138229148950, -0.04219773455554433675,
         -0.00962197152787697356, 0.00721894324666309954, -0.00116516759185906511,
         -0.00021524167411495097, 0.00012805028238811619, -0.00002013485478078824,
         -0.00000125049348214267, 0.00000113302723198170, -0.00000020563384169776,
          0.00000000611609510448, 0.00000000500200764447, -0.00000000118127457049,
          0.00000000010434267117, 0.00000000000778226344, -0.00000000000369680562,
          0.00000000000051003703, -0.00000000000002058326, -0.00000000000000534812,
          0.00000000000000122678, -0.00000000000000011813, 0.00000000000000000119,
          0.00000000000000000141, -0.00000000000000000023, 0.00000000000000000002)
    y  = float(x) - 1.0;
    sm = _a[-1];
    for an in _a[-2::-1]:
       sm = sm * y + an;
    return 1.0 / sm;
 
 
def test_gamma(x):
    #adapted from wikipedia's lanczo approximation
    #https://en.wikipedia.org/wiki/Lanczos_approximation#Simple_implementation
    x = float(x)
    p = [676.5203681218851, -1259.1392167224028, 771.32342877765313,
         -176.61502916214059, 12.507343278686905, -0.13857109526572012,
         9.9843695780195716e-6, 1.5056327351493116e-7]
    if x < 0.5:
        y = pi/(sin(pi*x)*test_gamma(1-x))
    else:
        x -= 1
        z = 0.99999999999980993
        for (i, pval) in enumerate(p):
            z += pval/(x+i+1)
        t = x + 7.5
        y = sqrt(2*pi) * t**(x+0.5) * exp(-t) *z
    return round(y, 14)

def new(z):
    #http://www.rskey.org/CMS/index.php/the-library/11
    if z<0:
        return (-pi)/(-z*new(-z)*sin(pi*z))
    q = [75122.6331530, 80916.6278952, 36308.2951477, 8687.24529705,
         1168.92649479, 83.8676043424, 2.50662827511]
    N = 7
    p1 = 0
    p2 = 1
    for n in range(0, N):
        p1 += q[n]*(z**n)
    for n in range(0, N):
        p2 *= (z+n)
    p3 = (z+5.5)**(z+0.5)*exp(-(z+5.5))
    return (p1/p2)*p3

def test(z):
    b = z+10
    a = b*z*z
    ans = 0
    for j in range(0, int(a+1)):
        ans += ((-1)**j*(b**j+z))/((j+z)*factorial(j))
    return ans

def lgamma(x):
    x = float(x)
    p1 = 0.9189385332046727
    p2 = (x-0.5)*log(x)
    p3 = -(x+(x/2)*log(x*sinh(1/x)+1/(810*x**6)))
    return p1+p2+p3

